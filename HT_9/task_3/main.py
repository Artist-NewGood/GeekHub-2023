""" 3. –ü—Ä–æ–≥—Ä–∞–º–∞-–±–∞–Ω–∫–æ–º–∞—Ç.
   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º:
      - –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ 3-4 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤–∞–ª—ñ–¥—É—é—Ç—å—Å—è –ø–∞—Ä–æ—é —ñ–º'—è/–ø–∞—Ä–æ–ª—å (—Ñ–∞–π–ª <users.CSV>);
      - –∫–æ–∂–µ–Ω –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –º–∞—î —Å–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å (—Ñ–∞–π–ª <{username}_balance.TXT>) —Ç–∞
        —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (—Ñ–∞–π–ª <{username_transactions.JSON>);
      - —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —è–∫ –≤–Ω–æ—Å–∏—Ç–∏ –≥—Ä–æ—à—ñ, —Ç–∞–∫ —ñ –∑–Ω—ñ–º–∞—Ç–∏ —ó—Ö. –û–±–æ–≤'—è–∑–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö
        –¥–∞–Ω–∏—Ö (–≤–≤–µ–¥–µ–Ω–æ —Ü–∏—Ñ—Ä–∏; –∑–Ω—ñ–º–∞—î—Ç—å—Å—è –Ω–µ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ —î –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É —ñ —Ç.–¥.).
   –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó:
      - —Ñ–∞–π–ª –∑ –±–∞–ª–∞–Ω—Å–æ–º - –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∫–æ–∂–µ–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –±–∞–ª–∞–Ω—Å—É
        (–º—ñ—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É –∑ –±–∞–ª–∞–Ω—Å–æ–º);
      - —Ñ–∞–π–ª - —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏ - –∫–æ–∂–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —É –≤–∏–≥–ª—è–¥—ñ JSON —Ä—è–¥–∫–∞
        –¥–æ–¥–∞—î—Ç—å—Å—è –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª–∞;
      - —Ñ–∞–π–ª –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏: —Ç—ñ–ª—å–∫–∏ —á–∏—Ç–∞—î—Ç—å—Å—è. –ê–ª–µ —è–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ
        —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –Ω–µ —Å—Ç—Ä–∏–º—É–π—Ç–µ —Å–µ–±–µ :)
   –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–∞:
      - –∑–∞ –∫–æ–∂–µ–Ω —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–∫—Ä–µ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è;
      - –æ—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - <start()> - –±—É–¥–µ –≤ —Å–æ–±—ñ –º—ñ—Å—Ç–∏—Ç–∏ –≤–µ—Å—å workflow –±–∞–Ω–∫–æ–º–∞—Ç–∞:
      - –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ - –ª–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–ø–∏—Ç—É—î —ñ–º'—è/–ø–∞—Ä–æ–ª—å).
        –Ø–∫—â–æ –≤–æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ - –≤–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ü–µ —ñ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ä–æ–±–æ—Ç—É
        (—Ö–æ—á–µ—Ç–µ - –∑—Ä–æ–±—ñ—Ç—å 3 —Å–ø—Ä–æ–±–∏, –∞ –ø–æ—Ç—ñ–º –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ä–æ–±–æ—Ç—É - –≤—Å–µ –Ω–∞ –µ–Ω—Ç—É–∑—ñ–∞–∑–º—ñ :))
      - –ø–æ—Ç—ñ–º - –µ–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–µ –º–µ–Ω—é —Ç–∏–ø–Ω:
        –í–≤–µ–¥—ñ—Ç—å –¥—ñ—é:
           1. –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –±–∞–ª–∞–Ω—Å
           2. –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
           3. –í–∏—Ö—ñ–¥
      - –¥–∞–ª—ñ - —Ñ–∞–Ω—Ç–∞–∑—ñ—è —ñ –∫—Ä–µ–∞—Ç–∏–≤, –º–æ–∂–µ—Ç–µ —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª, –∞–ª–µ –æ—Å–Ω–æ–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        –º–∞—î –±—É—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ :)
    P.S. –£–≤–∞–≥–∞! –§–∞–π–ª–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —Å–∞–º–µ –≤–∫–∞–∑–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ (csv, txt, json –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ)
    P.S.S. –î–æ–±—Ä–µ –ø—Ä–æ–¥—É–º–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π """

import os
import csv
from time import sleep
from datetime import datetime
import json
from prettytable import PrettyTable
import re


class IncorrectLengthUsername(Exception):
    pass


class SpaceInUsername(Exception):
    pass


class IncorrectLengthUserPassword(Exception):
    pass


class NoDigitInPassword(Exception):
    pass


class NoUpperLettersInPassword(Exception):
    pass


class NoSpecificLettersInPassword(Exception):
    pass


def menu(username) -> None:
    """User menu for using the program"""

    while True:
        print(f'\n____________________\n'
              f'Menu:\n'
              f'ùüè. Withdrawal\n'
              f'ùüê. Deposit money\n'
              f'ùüë. Show balance\n'
              f'ùüí. Transactions\n'
              f'ùüé. Exit\n'              
              f'‚ñº')

        match input('Your choice: '):
            case '1':
                sleep(1)
                withdrawal(username)
            case '2':
                sleep(1)
                deposit_money(username)
            case '3':
                sleep(1)
                print(f'--------------\n'
                      f'Money on your balance: {show_balance(username)}$')
                sub_menu(username)
            case '4':
                sleep(1)
                show_transactions(username)
                sub_menu(username)
            case '0':
                print('\n‚ô• Bye ‚ô•')
                exit()
            case _:
                print(' ! Error number, try again')
                sleep(1)


def sub_menu(username) -> None:
    """Sub menu for the user"""

    print('‚ñº\n'
          '1. Back to main menu\n'
          '0. Exit')

    match input('Your choice: '):
        case '1':
            sleep(1)
            menu(username)
        case '0':
            print('\n‚ô• Bye ‚ô•')
            exit()
        case _:
            print(' ! Error number, try again\n')
            sleep(1)
            sub_menu(username)


def verification_animation() -> None:
    """Displays an animation of waiting for data verification"""

    print('Check', end='', flush=True)
    for _ in range(3):
        sleep(1)
        print('.', end='', flush=True)
    return


def add_new_users() -> bool:
    """Adding a new user to a file"""

    print('\n**************************'
          '\nThe rule for registration:\n'
          ' - the username should not contain spaces and the length should be from 3 to 15 characters\n'
          ' - password must be at least 8 characters long\n'
          ' - the password must contain at least one digit, a capital letter and a special character\n'
          'P.S. If you change your mind and want to exit, press Enter\n')

    print('‚Ä¢ Registration form ‚Ä¢')

    username = validation_username(input('Create your username: '))
    password = validation_password(input('Create your password: '))

    with open(os.path.join(os.getcwd(), 'users.csv'), 'a', newline='', encoding='utf-8') as file:

        if all(isinstance(elem, str) for elem in (username, password)):
            writer = csv.writer(file)
            writer.writerow([username, password])
            print('Registration complete. Use your data for authorization')
            sleep(1)

            create_new_balance_file_for_new_users(username)
            create_new_transactions_file_for_new_users(username)
            return True

        exit()


def validation_username(username) -> str:
    """Checking the username for compliance with the requirements"""

    try:
        if not username:
            print('‚ùé Cancel registration\n'                 
                  '\n‚ô• Bye ‚ô•')
            exit()
        if not 3 <= len(username) <= 15:
            raise IncorrectLengthUsername(' ! Error, username is not the right length (need length between 3 and 15)')
        if ' ' in username:
            raise SpaceInUsername(' ! Error, no spaces are allowed in the username')
    except IncorrectLengthUsername as error:
        verification_animation()
        print(error)
        exit()
    except SpaceInUsername as error:
        verification_animation()
        print(error)
        exit()

    verification_animation()
    check_username_exists(username)
    print(' ‚úÖ Good username')

    return username


def check_username_exists(username) -> bool:
    """Checking the username for uniqueness"""

    full_path = check_file(os.path.join(os.getcwd(), 'users.csv'))

    with open(full_path, encoding='utf-8') as file:
        reader = csv.reader(file)
        next(reader)
        for row in reader:
            if username not in row:
                continue
            print(' ‚ùó A user with this name already exists. Try again')
            exit()

        return True


def validation_password(password: str) -> bool | str:
    """Checking the password for compliance with the requirements"""

    try:
        if not password:
            print('‚ùé Cancel registration\n'
                  '\n‚ô• Bye ‚ô•')
            exit()
        if len(password) < 8:
            raise IncorrectLengthUserPassword(' ! Error, your password is too short (must be more than 8 characters)')
        if password.isalpha():
            raise NoDigitInPassword(' ! Error, your password must contain at least one digit')
        if password == password.lower():
            raise NoUpperLettersInPassword(' ! Error, your password must contain at least one capital letter')
        if not re.sub(r'\w', '', password):
            raise NoSpecificLettersInPassword('! Error, your password must contain at least one specific letter')
    except IncorrectLengthUserPassword as error:
        verification_animation()
        print(error)
        exit()
    except NoDigitInPassword as error:
        verification_animation()
        print(error)
        exit()
    except NoUpperLettersInPassword as error:
        verification_animation()
        print(error)
        exit()
    except NoSpecificLettersInPassword as error:
        verification_animation()
        print(error)
        exit()

    verification_animation()
    print(' ‚úÖ Good password')
    return password


def create_new_balance_file_for_new_users(username: str) -> bool:
    """Create a new directory with a username with a balance sheet file"""

    dir_files = os.path.join(os.getcwd(), 'users', username)
    os.makedirs(os.path.join(dir_files))
    with open(os.path.join(dir_files, f'{username}_balance.txt'), 'w', encoding='utf-8') as file:
        file.write('0')
        return True


def show_balance(username: str) -> str:
    """View the user's balance and overwrite the balance after the selected transaction"""

    full_path = check_file(os.path.join(os.getcwd(), 'users', username, f'{username}_balance.txt'))
    with open(full_path, encoding='utf-8') as file_read:
        file_read = file_read.read()
        return file_read


def change_balance(username: str, money_request=None) -> None | bool:
    """Changes the user's balance file after each operation"""

    amount_balance = float(show_balance(username))

    if amount_balance + money_request > 0:
        with open(os.path.join(os.getcwd(), 'users', username, f'{username}_balance.txt'), 'w') as file_write:
            file_write.write(str(amount_balance + money_request))
            print('‚úÖ Complete operation')
            return True

    sleep(1)
    if amount_balance:
        print(f'\nError, the withdrawal amount is higher than the amount available on the account.'
              f'\n!Your balance is {amount_balance}$\n'
              f'Enter a smaller amount\n')
        sleep(1)
        sub_menu(username)
    else:
        print(f'\nError, the withdrawal amount is higher than the amount available on the account.'
              f'\n!Your balance is {amount_balance}$\n'
              f'Deposit money first.\n')
        sleep(1)
        sub_menu(username)


def withdrawal(username: str) -> None:
    """Withdrawing money from the user's balance"""

    money_withdrawal = check_input_user_data('How much money you want to withdrawal?: ')
    if change_balance(username, -abs(money_withdrawal)):
        add_transactions(username, -abs(money_withdrawal))
        sleep(1)
        sub_menu(username)


def deposit_money(username: str) -> None:
    """Adding money to the user's balance"""

    money_deposit = check_input_user_data('How much money you want to deposit?: ')
    change_balance(username, abs(money_deposit))
    add_transactions(username, abs(money_deposit))
    sleep(1)
    sub_menu(username)


def create_new_transactions_file_for_new_users(username: str) -> bool:
    """Create a new transaction file for a new user"""

    dir_files = os.path.join(os.getcwd(), 'users', username)
    with open(os.path.join(dir_files, f'{username}_transactions.json'), 'w', encoding='utf-8') as file:
        first_data = \
            [{
                "Operation": "Registration",
                "Amount": 0,
                "Date": f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
            }]
        json.dump(first_data, file, indent=3)
        return True


def show_transactions(username: str, option=1) -> dict:
    """Viewing user transactions from a file as a formatted table"""

    full_path = check_file(os.path.join(os.getcwd(), 'users', username, f'{username}_transactions.json'))
    with open(full_path, encoding='utf-8') as file:
        data_operations = json.load(file)
        if option:
            table = PrettyTable()
            table.field_names = data_operations[0].keys()

            for i in data_operations:
                table.add_row(i.values())

            print('\n***             TRANSACTIONS                 ***')
            print(table)

        return data_operations


def add_transactions(username: str, funds: float, option=0) -> None:
    """Adding a user transaction to the end of a file"""

    total_transaction_operation = show_transactions(username, option)

    if funds:
        new_transactions = \
            {
                "Operation": f'{"Withdrawal" if funds < 0 else "Deposit"}',
                "Amount": abs(funds),
                "Date": f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
            }
        total_transaction_operation.append(new_transactions)

    with open(os.path.join(os.getcwd(), 'users', username, f'{username}_transactions.json'), 'w') as file:
        json.dump(total_transaction_operation, file, indent=3)


def check_login_data() -> str | bool:
    """Check user login data for presence in the file"""

    full_path = check_file(os.path.join(os.getcwd(), 'users.csv'))
    username = input('Enter your username: ')
    user_password = input('Enter your password: ')

    with open(full_path, encoding='utf-8') as file_users:
        reader = csv.reader(file_users)
        next(reader)
        for row in reader:
            if [username, user_password] == row:
                verification_animation()
                print(' ‚úÖ Login successful')

                sleep(1)
                return username

        verification_animation()
        print(' ! Error, username or password incorrect.')
        return False


def check_input_user_data(prompt: str) -> float:
    """Checking user input values for type matching"""

    while True:
        try:
            number = float(input(prompt))
            return number
        except ValueError:
            print(' ! Error, enter please a number\n')


def check_file(path: str) -> str:
    """Checking a file for existence on a given path"""

    try:
        with open(path, encoding='utf-8') as file:
            return path
    except FileNotFoundError as error:
        print(error)
        exit()


def start() -> None:
    """Main controller"""

    print('‚ñº\n'
          'Here are the available features of this ATM.\n'
          ' ‚Ä¢ withdraw money from your account\n'
          ' ‚Ä¢ deposit money to your account\n'
          ' ‚Ä¢ view your account transactions\n'
          'If you are not our client, you can register '
          '(you will need to come up with a username and a "good" password).\n'
          'After that, you will also have access to the full functionality of the ATM.')

    while True:
        print('\n--------------------\n'
              'Choose what you want\n'
              '‚ë†. Registration\n'
              '‚ë°. Log in\n'
              '‚ì™. Exit\n'
              '  ‚ñº')

        match input('Input operation number to continue: '):
            case '1':
                sleep(1)
                add_new_users()
            case '2':
                for i in range(3, 0, -1):
                    sleep(1)
                    print(f'\n ‚Ä¢ Authorization ‚Ä¢')
                    result_check_users_name = check_login_data()

                    if result_check_users_name:
                        menu(result_check_users_name)

                    if i > 1:
                        print(f'You have {i - 1} more tries')
                        continue

                sleep(1)
                print(f'\nWe are sorry, but you have entered your data incorrectly 3 times and your account has '
                      'been temporarily blocked.\nTo resolve the issue, please email us at fildaiko@gmail.com')
                exit()
            case '0':
                sleep(1)
                print('\n‚ô• Bye ‚ô•')
                exit()
            case _:
                print(' ! Error. Please, enter a correct number operation (1, 2 or 3). Try again')
                sleep(1)


if __name__ == '__main__':
    start()
