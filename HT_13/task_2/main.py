""" –°—Ç–≤–æ—Ä—ñ—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª–∞—Å—ñ–≤ —Ç–∞ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–π—Ç–µ —Å–≤–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —à–∫—ñ–ª—å–Ω–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ (–≤–∫–ª—é—á—ñ—Ç—å —Ñ–∞–Ω—Ç–∞–∑—ñ—é).
    –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –≤–æ–Ω–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –∫–ª–∞—Å–∏ Person, Teacher, Student, Book, Shelf, Author, Category —ñ.—Ç.–¥."""

import os
import sqlite3
from prettytable import PrettyTable


class System:
    def __init__(self):
        pass

    @staticmethod
    def start():
        print('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏.')

        print(f'1. –ù–æ–≤–∏–π —á–∏—Ç–∞—á\n'
              f'2. –í—ñ–¥–≤—ñ–¥—É–≤–∞—á\n'
              f'\n'
              f'0. –í–∏—Ö—ñ–¥')

        while True:
            menu_item = input('\n–í–∞—à –≤–∏–±—ñ—Ä: ')
            match menu_item:
                case '1':
                    User.add_new_user()
                case '2':
                    User.login()
                case '0':
                    print('Bye')
                    exit()
                case _:
                    print(' ! –ü–æ–º–∏–ª–∫–∞ –Ω–æ–º–µ—Ä—É –æ–ø–µ—Ä–∞—Ü—ñ—ó(–ø–æ—Ç—Ä—ñ–±–Ω–æ 1, 2 —á–∏ 0)\n')

    @staticmethod
    def user_menu(username: str):
        while True:
            print(f'\n____________________\n'
                  f'–ú–µ–Ω—é:\n'
                  f'ùüè. –í–∑—è—Ç–∏ –∫–Ω–∏–≥—É\n'
                  f'ùüê. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–Ω–∏–≥—É\n'
                  f'ùüë. –ú–æ—ó –≤–∑—è—Ç—ñ –∫–Ω–∏–≥–∏\n'
                  f'\n'
                  f'ùüé. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏\n'
                  f'ùüó. –í–∏—Ö—ñ–¥\n'
                  f'‚ñº')

            match input('–í–∞—à –≤–∏–±—ñ—Ä: '):
                case '1':
                    System.take_books_menu(username)
                case '2':
                    Books.back_book(username)
                case '3':
                    User.my_taken_books(username)
                case '0':
                    print('\n‚ô• –î–æ–ø–æ–±–∞—á–µ–Ω–Ω—è ‚ô•')
                    exit()
                case '9':
                    print('‚ô• –î–æ–ø–æ–±–∞—á–µ–Ω–Ω—è ‚ô•\n')
                    os.system('cls' if os.name == 'nt' else 'clear')
                    System.start()
                case _:
                    print(' ! –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –º–µ–Ω—é, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\n')

    @staticmethod
    def sub_menu(username: str) -> None:
        """Sub menu for the user"""

        print('‚ñº\n'
              '1. –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é\n'
              '0. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏')

        match input('–í–∞—à –≤–∏–±—ñ—Ä: '):
            case '1':
                System.user_menu(username)
            case '0':
                print('\n‚ô• –î–æ–ø–æ–±–∞—á–µ–Ω–Ω—è ‚ô•')
                exit()
            case _:
                print(' ! –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –º–µ–Ω—é, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\n')
                System.sub_menu(username)

    @staticmethod
    def check_file() -> str:
        """Checking a file for existence on a given path"""

        full_path = os.path.join(os.getcwd(), 'library.db')

        try:
            with open(full_path, 'r') as db:
                return full_path
        except FileNotFoundError as error:
            print(error)
            exit()

    @staticmethod
    def take_books_menu(username: str):
        while True:
            print(f'\n____________________\n'
                  f'–í–∏–±—ñ—Ä –∫–Ω–∏–≥–∏:\n'
                  f'ùüè. –ó–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n'
                  f'ùüê. –ó–∞ –∞–≤—Ç–æ—Ä–æ–∏\n'
                  f'ùüë. –ó–∞ –∂–∞–Ω—Ä–æ–º\n'
                  f'ùüí. –ó–∞ —Ä–æ–∫–æ–º –≤–∏–ø—É—Å–∫—É\n'
                  f'\n'
                  f'0. –ù–∞–∑–∞–¥\n'
                  f'‚ñº')

            match input('Your choice: '):
                case '1':
                    Books.book_selection_options(username, 1)
                case '2':
                    Books.book_selection_options(username, 2)
                case '3':
                    Books.book_selection_options(username, 3)
                case '4':
                    Books.book_selection_options(username, 4)
                case '0':
                    System.user_menu(username)
                case _:
                    print(' ! –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –º–µ–Ω—é, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\n')

    @staticmethod
    def check_input_user_data(prompt: str) -> float | bool:

        while True:
            try:
                number = input(prompt)
                if not number:
                    return False
                return int(number)
            except ValueError:
                print('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ\n')


class User:
    def __init__(self):
        pass

    @staticmethod
    def login():
        """"""

        username = input('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º`—è: ')

        full_path = System.check_file()
        with sqlite3.connect(full_path) as db:
            cursor = db.cursor()
            query = cursor.execute("""SELECT name
                                FROM library_user
                                WHERE name = ?""",
                                   (username,)).fetchone()

            if not query:
                print(' ! –ü–æ–º–∏–ª–∫–∞, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –Ω–µ–º–∞ –≤ –±–∞–∑—ñ')
                exit()
            System.user_menu(username)

    @staticmethod
    def my_taken_books(username: str) -> None:
        """"""

        full_path = System.check_file()
        with sqlite3.connect(full_path) as db:
            cursor = db.cursor()
            taken_books = cursor.execute("""SELECT taken_books
                                          FROM library_user
                                          WHERE name = ?""",
                                         (username,)).fetchone()

            if not taken_books[0]:
                print('–ù–∞–∂–∞–ª—å –≤–∏ —â–µ –Ω–µ –±—Ä–∞–ª–∏ –Ω—ñ –æ–¥–Ω—ñ—î—ó –∫–Ω–∏–∂–∫–∏.')
                System.sub_menu(username)

            taken_books = [(book + ' ',) for book in ', '.join(taken_books).split(';') if book]
            table = PrettyTable()
            table.field_names = ['–ù–æ–º–µ—Ä', '–ù–∞–∑–≤–∞ –∫–Ω–∏–∂–∫–∏']
            for number, book in enumerate(taken_books, 1):
                table.add_row((number,) + book)

            print(table)
            System.sub_menu(username)

    @staticmethod
    def add_new_user() -> None:
        """"""

        print('Registration')
        username = input('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º`—è: ')
        surname = input('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ: ')
        favourite_genres = input('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ –∂–∞–Ω—Ä–∏ –∫–Ω–∏–∂–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É: ')

        full_path = System.check_file()
        with sqlite3.connect(full_path) as db:
            cursor = db.cursor()
            cursor.execute("""INSERT INTO library_user
                                      ('name', 'surname', 'favorite_genre', 'taken_books')
                                      VALUES (?, ?, ?, ?)""",
                           (username, surname, favourite_genres, ''))
            db.commit()
            print('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ')
            System.user_menu(username)


class DataBase:
    def __init__(self):
        pass

    @staticmethod
    def queries(number: int) -> list:
        """"""

        full_path = System.check_file()
        with sqlite3.connect(full_path) as db:
            cursor = db.cursor()
            if number == 1:
                query_rating = cursor.execute("""SELECT *
                                                  FROM library_books
                                                  ORDER BY rating DESC""").fetchall()
                return query_rating

            elif number == 2:
                query_author = cursor.execute("""SELECT *
                                                             FROM library_books
                                                             ORDER BY author""").fetchall()
                return query_author

            elif number == 3:
                query_genre = cursor.execute("""SELECT *
                                                             FROM library_books
                                                             ORDER BY genre""").fetchall()
                return query_genre

            elif number == 4:
                query_year_release = cursor.execute("""SELECT *
                                                             FROM library_books
                                                             ORDER BY year_release""").fetchall()
                return query_year_release


class Books:
    def __init__(self):
        pass

    @staticmethod
    def book_selection_options(username: str, number: int) -> None:
        """"""

        query = DataBase.queries(number)
        table = PrettyTable()
        table.field_names = ['–ù–æ–º–µ—Ä', '–†–µ–π—Ç–∏–Ω–≥', '–ê–≤—Ç–æ—Ä', '–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏', '–ñ–∞–Ω—Ä', '–†—ñ–∫ –≤–∏–ø—É—Å–∫—É']
        for number, book in enumerate(query, 1):
            table.add_row((number,) + book)

        print(table)
        while True:
            number_take_book = System.check_input_user_data('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–Ω–∏–∂–∫–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∑—è—Ç–∏ '
                                                            '(—á–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "Enter" –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó): ')

            if not number_take_book:
                print('–í—ñ–¥–º—ñ–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó')
                System.sub_menu(username)

            if int(number_take_book) not in range(1, len(query) + 1):
                print('–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–Ω–∏–∂–∫–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\n')
                continue
            break

        book = ', '.join(query[int(number_take_book) - 1][1:3])
        Books.add_taken_book_to_user(username, book)
        print('–í–∏–∫–æ–Ω–∞–Ω–æ')
        System.sub_menu(username)

    @staticmethod
    def add_taken_book_to_user(username: str, book: str) -> None:
        """"""

        full_path = System.check_file()
        with sqlite3.connect(full_path) as db:
            cursor = db.cursor()
            taken_books = ', '.join(cursor.execute("""SELECT taken_books
                              FROM library_user
                              """).fetchone())
            total = taken_books + '; ' + book if taken_books else book

            cursor.execute("""UPDATE library_user
                                            SET taken_books = ?
                                            WHERE name =?""",
                           (total, username))
            db.commit()

    @staticmethod
    def back_book(username: str) -> None:
        """"""

        full_path = System.check_file()
        with sqlite3.connect(full_path) as db:
            cursor = db.cursor()
            taken_books = cursor.execute("""SELECT taken_books
                                      FROM library_user
                                      WHERE name = ?""",
                                         (username,)).fetchone()
            if not taken_books[0]:
                print('–ù–∞–∂–∞–ª—å –≤–∏ —â–µ –Ω–µ –±—Ä–∞–ª–∏ –Ω—ñ –æ–¥–Ω—ñ—î—ó –∫–Ω–∏–∂–∫–∏')
                System.sub_menu(username)

            taken_books = [(book.strip(' ;'),) for book in ''.join(taken_books).split(';') if book]

            table = PrettyTable()
            table.field_names = ['–ù–æ–º–µ—Ä', '–ù–∞–∑–≤–∞ –∫–Ω–∏–∂–∫–∏']
            for number, book in enumerate(taken_books, 1):
                table.add_row((number,) + book)

            print(table)

            while True:
                number_back_book = System.check_input_user_data('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–Ω–∏–∂–∫–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ '
                                                                '(—á–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "Enter" –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó): ')

                if not number_back_book:
                    print('–í—ñ–¥–º—ñ–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó')
                    System.sub_menu(username)

                if int(number_back_book) not in range(1, len(taken_books) + 1):
                    print('–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–Ω–∏–∂–∫–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\n')
                    continue

                break
            del taken_books[int(number_back_book) - 1]

            total = '; '.join([name for book in taken_books for name in book])
            cursor.execute("""UPDATE library_user
                                   SET taken_books = ?""",
                           (total,))
            db.commit()
            print('–í–∏–∫–æ–Ω–∞–Ω–æ')
            System.sub_menu(username)


if __name__ == '__main__':
    import sys
    from pathlib import Path

    sys.path.append(str(Path(__file__).parent.parent.parent))
    System.start()
